generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name              String?
  surname           String?
  phonenumber       String?
  password          String
  code              String
  codeExpiresAt     DateTime?
  courses           String[]
  activity          Activity[]
  email             String                  @unique
  updatedAt         DateTime                @updatedAt
  coins             Int                     @default(0)
  profilePic        String                  @default("")
  createdAt         DateTime                @default(now())
  isVerified        Boolean                 @default(false)
  id                String                  @id @default(uuid())
  notifications     NotificationRecipient[]
  notificationsRead NotificationRead[]
}

model Notification {
  id        String             @id @default(uuid())
  title     String
  message   String
  createdAt DateTime           @default(now())
  isGlobal  Boolean            @default(false)
  sentAt    DateTime           @default(now())
  readBy    NotificationRead[]

  courseId String?
  course   CoursesCategory? @relation(fields: [courseId], references: [id])

  recipients NotificationRecipient[]
}

model NotificationRecipient {
  id             String  @id @default(uuid())
  userId         String
  notificationId String
  isRead         Boolean @default(false)

  user         User         @relation(fields: [userId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
}

model NotificationRead {
  id             String   @id @default(uuid())
  userId         String
  notificationId String
  readAt         DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId]) // bitta user har bir notificationni faqat bir marta o‘qigan bo‘lishi mumkin
}

model CoursesCategory {
  id            String         @id @default(uuid())
  title         String
  shortName     String
  thumbnail     String
  goal          String
  lessons       Lessons[]      @relation("CategoryLessons")
  notifications Notification[]
}

model Activity {
  id     String  @id @default(uuid())
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Lessons {
  id                String          @id @default(uuid())
  title             String
  isDemo            Boolean         @default(false)
  videoUrl          String
  coursesCategoryId String
  quessions         Quessions[]     @relation("Quessions")
  dictonary         Dictonary[]     @relation("Dictonary")
  quizs             Quizs[]         @relation("Quizs")
  coursesCategory   CoursesCategory @relation("CategoryLessons", fields: [coursesCategoryId], references: [id])
}

model Quessions {
  id        String  @id @default(uuid())
  quession  String
  Lessons   Lessons @relation("Quessions", fields: [lessonsId], references: [id])
  lessonsId String
}

model Dictonary {
  id         String  @id @default(uuid())
  word       String
  translated String
  Lessons    Lessons @relation("Dictonary", fields: [lessonsId], references: [id])
  lessonsId  String
}

model Quizs {
  id            String  @id @default(uuid())
  quiz          String
  lessonsId     String
  option1       String
  option2       String
  option3       String
  currentOption String
  Lessons       Lessons @relation("Quizs", fields: [lessonsId], references: [id])
}
